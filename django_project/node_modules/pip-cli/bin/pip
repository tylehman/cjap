#!/usr/bin/env node

var program = require('commander')
var fs = require('fs')
var path = require('path')
var chalk = require('chalk')
var inquirer = require('inquirer')
var logger = require('../lib/logger')
var mkdirp = require('mkdirp')
var cpr = require('cpr')
var package = require('../package')

var exists = fs.existsSync
var version = package.version

/**
 * Usage.
 */

program
  .version(version)  
  .usage('<project-name>')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.green('    # create a new pip project with a template'))
  console.log(chalk.green('    $ pip <project-name>'))
  console.log(chalk.yellow('    $ <project-name> shold be letters only'))
  console.log()
})

program.parse(process.argv)
if (program.args.length < 1)
  return program.help()

/**
 * Settings.
 */

var name = program.args[0]
if (!/[a-z]/.test(name)) {
  return program.help()
}
var Name = name[0].toUpperCase() + name.slice(1)
var project = name.startsWith("pip-") ? name : `pip-${name}`
var to = path.resolve(project)
console.log(name, Name, project)
console.log(to)

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  })
} else {
  run()
}

/**
 * Generate the project.
 */

function run() {
  logger.success('========== Generating Start ==========')
  console.log()
  copyDirectory(path.resolve(__dirname, "../template"), path.resolve(to))
    .then(() => {
      // copy finish
      return Promise.all([
        rename(path.resolve(to, "./src/main/java/com/pip/{name}"), path.resolve(to, `./src/main/java/com/pip/${name}`)),
        rename(path.resolve(to, "./src/test/java/test/com/pip/{name}"), path.resolve(to, `./src/test/java/test/com/pip/${name}`))
      ])
    })
    .then(() => {
      // rename finish
      return Promise.all([
        // ===== main directory =====
        readFile(path.resolve(__dirname, "../template/pom.xml"))
          .then(pom => {
            return writeFile(path.resolve(to, `./pom.xml`), replaceName(pom))
          }),
        // ===== src/main/java =====
        // ===== src/main/resources =====
        readFile(path.resolve(__dirname, "../template/src/main/resources/struts.xml"))
          .then(xml => {
            writeFile(path.resolve(to, "./src/main/resources/struts.xml"), replaceName(xml))
          }),
        readFile(path.resolve(__dirname, "../template/src/main/resources/struts-cfg/account.xml"))
          .then(xml => {
            writeFile(path.resolve(to, "./src/main/resources/struts-cfg/account.xml"), replaceName(xml))
          }),
        readFile(path.resolve(__dirname, "../template/src/main/resources/struts-cfg/main.xml"))
          .then(xml => {
            writeFile(path.resolve(to, "./src/main/resources/struts-cfg/main.xml"), replaceName(xml))
          }),
        readFile(path.resolve(__dirname, "../template/src/main/resources/struts-cfg/sso.xml"))
          .then(xml => {
            writeFile(path.resolve(to, "./src/main/resources/struts-cfg/sso.xml"), replaceName(xml))
          }),
        // ===== src/main/webapp =====
        readFile(path.resolve(__dirname, "../template/src/main/webapp/index.html"))
          .then(html => {
            writeFile(path.resolve(to, "./src/main/webapp/index.html"), replaceName(html))
          })
      ])
    })
    .catch(err => {
      logger.fatal(err)
    })
    .then(() => {
      console.log()
      logger.success('========== Generating End ==========')
    })
}

function makeDirectory(path, fn = function () { return true }) {
  return new Promise((resolve, reject) => {
    mkdirp(path, 0755, err => {
      if (err) {
        reject(err)
      }
      console.log("   \033[36mcreate\033[0m : " + path)
      resolve(fn())
    })
  })
}

function copyDirectory(from, to) {
  return new Promise((resolve, reject) => {
    cpr(from, to, {
      deleteFirst: true,
      overwrite: true,
      confirm: true
    }, function(err, files) {
      if (err) {
        reject(err)
      }
      resolve(files)
    })
  })
}

function rename(oldPath, newPath) {
  return new Promise((resolve, reject) => {
    fs.rename(oldPath, newPath, err => {
      if (err) {
        reject(err)
      }
      console.log("   \033[36mrename\033[0m : " + oldPath)
      resolve(true)
    })
  })
}

function readFile(file) {
  return new Promise((resolve, reject) => {
    fs.readFile(file, "utf8", (err, data) => {
      if (err) {
        reject(err)
      } else {
        resolve(data)
      }
    })
  })
}

function writeFile(file, data) {
  return new Promise((resolve, reject) => {
    fs.writeFile(file, data, "utf8", err => {
      if (err) {
        reject(err)
      } else {
        console.log("   \033[36mreplace\033[0m : " + file)
        resolve(true)
      }
    })
  })
}

function sleep(timeout) {
  return new Promise(resolve => setTimeout(resolve, timeout))
}

function replaceName(source) {
  return source.replace(/{name}/g, name).replace(/{Name}/g, Name)
}