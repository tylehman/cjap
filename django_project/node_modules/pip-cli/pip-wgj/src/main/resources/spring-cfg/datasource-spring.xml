<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
    
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
		<property name="location">
			<value>classpath:web.properties</value>
		</property>
	</bean>
	
    <!--  配置sessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"></property> -->
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:/hbm-cfg/</value>
            </list>
        </property> -->
        <property name="mappingLocations">
            <list>
                <value>classpath:hbm-cfg/*.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.OracleDialect
                </prop>
                <prop key="hibernate.autoReconnect">true</prop>
                <prop key="hibernate.autoReconnectForPools">true</prop>
                <prop key="hibernate.is-connection-validation-required">true</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop><!-- 数据库批量更新、添加、删除操作最大数 -->
                <prop key="hibernate.cache.use_second_level_cache">false</prop><!-- 禁用二级缓存，提高批量速度 -->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.connection.autocommit">true</prop>
                
                <!-- 将session绑定到本地线程 -->
                
                
                <!-- 最大连接数 -->  
                <prop key="hibernate.c3p0.max_size">100</prop>  
                <!-- 最小连接数 -->  
                <prop key="hibernate.c3p0.min_size">5</prop>  
                <!-- 获得连接的超时时间,如果超过这个时间,会抛出异常，单位毫秒 -->  
                <prop key="hibernate.c3p0.timeout">60000</prop>  
                <!-- 最大的PreparedStatement的数量 -->  
                <prop key="hibernate.c3p0.max_statements">100</prop>  
                <!-- 每隔120秒检查连接池里的空闲连接 ，单位是秒-->  
                <prop key="hibernate.c3p0.idle_test_period">120</prop>  
                <!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->  
                <prop key="hibernate.c3p0.acquire_increment">5</prop>  
                <!-- 每次都验证连接是否可用 -->  
                <prop key="hibernate.c3p0.validate">true</prop>
            </props>
        </property>
    </bean>
    
    <!-- 
    <bean id="nativeJdbcExtractor"
          class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
          lazy-init="true"/>

    <bean id="lobHandler"
           class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">
           <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>
    </bean>
    -->
    
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass">
            <value>${mvn.jdbc.driverClassName}</value>
        </property>
        <property name="jdbcUrl">
            <value>${mvn.jdbc.url}</value>
        </property>
        <property name="user"><value>${mvn.jdbc.username}</value></property>
        <property name="password"><value><![CDATA[${mvn.jdbc.password}]]></value></property>
        
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <!-- <property name="acquireIncrement">3</property> -->   
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->   
        <!-- <property name="acquireRetryAttempts">30</property>    -->
        <!--两次连接中间隔时间，单位毫秒。Default: 1000 -->   
        <!-- <property name="acquireRetryDelay">1000</property>    -->
        <!--连接关闭时默认将所有未提交的操作回滚。Default: false -->   
        <!-- <property name="autoCommitOnClose">false</property>    -->
        <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 使用。Default: null-->   
        <!-- <property name="automaticTestTable">Test</property>   --> 
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->   
        <!-- <property name="breakAfterAcquireFailure">false</property>    -->
        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->   
        <!-- <property name="checkoutTimeout">100</property>    -->
        <!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs. （文档原文）作者强烈建议不使用的一个属性-->   
        <!-- <property name="forceIgnoreUnresolvedTransactions">false</property>    -->
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <!-- <property name="idleConnectionTestPeriod">60</property>    -->
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
        <!-- <property name="initialPoolSize">3</property>    -->
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
        <!-- <property name="maxIdleTime">60</property>    -->
        <!--连接池中保留的最大连接数。Default: 15 -->   
        <!-- <property name="maxPoolSize">15</property>    -->
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
                              如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <!-- <property name="maxStatements">100</property>    -->
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->   
        <!-- <property name="maxStatementsPerConnection"></property>    -->
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能  通过多线程实现多个操作同时被执行。Default: 3-->   
        <!-- <property name="numHelperThreads">3</property>    -->
        <!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0 的数据源时。Default: null-->   
        <!-- <property name="overrideDefaultUser">root</property>    -->
        <!--与overrideDefaultUser参数对应使用的一个参数。Default: null-->   
        <!-- <property name="overrideDefaultPassword">password</property>    -->
        <!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->   
        <!-- <property name="propertyCycle">300</property>    -->
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。Default: false -->   
        <!-- <property name="testConnectionOnCheckout">false</property>    -->
        <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->   
        <!-- <property name="testConnectionOnCheckin">true</property>    -->
    </bean>


    <!-- 声明式的事物配置  -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 配置事物传播方式 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="edit*" propagation="REQUIRED" ></tx:method>
            <tx:method name="insert*" propagation="REQUIRED" ></tx:method>
            <tx:method name="save*" propagation="REQUIRED" ></tx:method>
            <tx:method name="del*" propagation="REQUIRED" ></tx:method>
            <tx:method name="update*" propagation="REQUIRED" ></tx:method>
            <tx:method name="mod*" propagation="REQUIRED" ></tx:method>
            <tx:method name="add*" propagation="REQUIRED" ></tx:method>
            <tx:method name="batch*" propagation="REQUIRED" ></tx:method>
            <tx:method name="move*" propagation="REQUIRED" ></tx:method>
            <tx:method name="*" read-only="true"  ></tx:method>
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP -->
    <aop:config>
        <aop:pointcut id="allDaoMethod" expression="execution (* com.pip.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allDaoMethod"/>
    </aop:config>


    
    
    <!-- 其他数据源及其jdbcTemplate begin at 2016.6.30 -->
	<!-- 海量电话数据源 -->
    <bean id="jdbcTemplate_deinonychus"
          class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
          lazy-init="false" autowire="default" dependency-check="default">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
   
    
    <!-- 其他数据源及其jdbcTemplate end -->
    
    
    <!-- 导入service,dao -->
    
</beans>