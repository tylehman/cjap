package com.pip.action.baseaction;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.pip.accountcloud.api.AccountServer;
import com.pip.common.dao.sqlengine.BaseParam;
import com.pip.common.dao.sqlengine.PageDataSet;
import com.pip.common.dao.sqlengine.SQLConditionBuilder.Operator;
import com.pip.common.exception.CommonException;
import com.pip.common.model.Area;
import com.pip.common.model.Result;
import com.pip.common.model.enumfactory.LogTypeEnum;
import com.pip.common.model.log.AuditLog;
import com.pip.common.util.JsonObject;
import com.pip.common.util.ReturnConstants;
import com.pip.common.util.StringUtil;
import com.pip.dao.BaseDaoUtil;
import com.pip.dao.common.AuditLogDao;
import com.pip.datacloud.api.DataServer;
import com.pip.service.common.AllLogService;
import com.pip.service.common.CommonSearchService;
import com.pip.util.ServiceLocator;
import com.pip.util.UserUtil;
import net.sf.json.JSONObject;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.json.annotations.JSON;
import org.springframework.jdbc.core.JdbcTemplate;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;

public class BaseAction extends ActionSupport
{

    private static final long serialVersionUID = 1L;

    //是否调用成功
    public boolean success = true;
    
    //失败时显示的错误异常消息
    public String message = "";
    
    //参数
    public String json = "{}";
    
    //页面
    public String actionresult = "AJAX";
    
    //结果
    public Map<String, Object> map = new HashMap<String, Object>();

    protected CommonSearchService commonSchService;
    
    /////////////////////
    
    protected final String AJAX = "AJAX";

    protected final String EDIT = "EDIT";

    protected final String ADD = "ADD";

    protected AllLogService logService;

    /**
     * final msgKey
     */
    private final String msgKey = "actionMessage";

    protected String pMessage;

    protected HttpServletRequest request;

    protected HttpServletResponse response;

    protected HttpSession session;

    ///////////////////////

    public String getJson()
    {
        return json;
    }
    
    public void setJson(String json)
    {
        this.json = json;
    }

    public String getPMessage()
    {
        Map<String, Object> session = ActionContext.getContext().getSession();
        if (session.containsKey(msgKey))
        {
            String resultMsg = session.get(msgKey).toString();
            session.remove(msgKey);
            return resultMsg;
        }
        else
        {
            return "";
        }
    }

    /**
     * 可以跨页面传递消息
     *
     * @param pMessage
     */
    public void setPMessage(String pMessage)
    {
        Map<String, Object> session = ActionContext.getContext().getSession();
        session.put(msgKey, pMessage);
    }

    @JSON(serialize = false)
    public HttpServletRequest getRequest()
    {
        if (request == null)
        {
            request = ServletActionContext.getRequest();
        }
        return request;
    }

    @JSON(serialize = false)
    public HttpServletResponse getResponse()
    {
        if (response == null)
        {
            response = ServletActionContext.getResponse();
        }
        return response;
    }

    /**
     * 获取Request中的参数
     *
     * @param name
     * @return
     */
    @JSON(serialize = false)
    public String getParameter(String name)
    {
        if (getRequest().getParameterMap().containsKey(name))
        {
            return getRequest().getParameter(name).toString();
        }
        else
        {
            return "";
        }
    }

    @JSON(serialize = false)
    public Integer getParameterInt(String name)
    {
        if (getRequest().getParameterMap().containsKey(name)) {

            return Integer.parseInt(getRequest().getParameter(name));
        } else {
            return 0;
        }
    }
    @JSON(serialize = false)
    public DataServer getDataServer()
    {
       return (DataServer)ServiceLocator.findService("dataServer");
    }
    /**
     * 保存日志到数据库
     */
    public void saveLog(LogTypeEnum type, String info)
    {
        logService.saveEasyLog(getUserKey(), type, info, getRequest().getRemoteAddr());
    }

    /**
     * 保存日志到数据库(日志类型为LOG_TYPE_SYSTEM)
     */
    public void saveLog(String info)
    {
        logService.saveEasyLog(getUserKey(), LogTypeEnum.LOG_TYPE_SYSTEM, info, getRequest().getRemoteAddr());
    }

    /**
     * 保存系统异常日志到数据库(LOG_TYPE_SYSTEMEXCEPTION)
     */
    public void saveExceptionLog(String info)
    {
        if (info != null) {
            logService.saveEasyLog(getUserKey(), LogTypeEnum.LOG_TYPE_SYSTEMEXCEPTION, info, getRequest().getRemoteAddr());
        }
    }

    public void setLogService(AllLogService logService)
    {
        this.logService = logService;
    }

    @JSON(serialize = false)
    public HttpSession getSession()
    {
        if (session == null) {
            session = UserUtil.getServletSession();
        }
        return session;
    }

    /**
     * 获取用户登录的SessionKey
     *
     * @return
     */
    @JSON(serialize = false)
    public String getUserKey() 
    {
        return UserUtil.getUserKey();
    }
    /**
     * 获取JdbcTemplate
     *
     * @return
     */
    @JSON(serialize = false)
    public JdbcTemplate getPIPJdbcTemplate() 
    {
        return BaseDaoUtil.instance().getJdbcTemplate();
    }

    @JSON(serialize = false)
    public DataSource getPIPDataSource() 
    {
        return BaseDaoUtil.instance().getDataSource();
    }
    public void saveSuccessAuditLog(int type, String name, String condition)
    {
        AuditLog log = new AuditLog();
        log.setOPERATE_TYPE(type);
        log.setOPERATE_RESULT("1");
        log.setOPERATE_NAME(name);
        log.setOPERATE_CONDITION(condition);
        AuditLogDao.getInstance().addLog(log);
    }

    public void saveErrorAuditLog(int type, String name, String condition, String code)
    {
        AuditLog log = new AuditLog();
        log.setOPERATE_TYPE(type);
        log.setOPERATE_RESULT("0");
        log.setERROR_CODE("");
        log.setOPERATE_NAME(name);
        log.setOPERATE_CONDITION(condition);
        AuditLogDao.getInstance().addLog(log);
    }
    @JSON(serialize = false)
    public AccountServer getAccountServer()
    {
        return (AccountServer)ServiceLocator.findService("accountServer");
    }
    @JSON(serialize = false)
    public String getCityNameByAreaid(String areaid)
    {
        String city = "";
        Result areaResult = getAccountServer().GetArea(areaid);
        //
        Area area = (Area)areaResult.getResult();
        String name = area.getName();
        //只获取到市的名字，比如河北省石家庄市正定县 则只取 '河北省石家庄市'
        int pos = name.indexOf("市");
        city = name.substring(0, pos + 1);
        city = city.replace("省", "");
        city = city.replace("市", "");
        return city;
    }

    public boolean isSuccess()
    {
        return success;
    }

    public String getMessage()
    {
        return message;
    }

    public Map<String, Object> getMap()
    {
        return map;
    }

    public String getActionresult()
    {
        return actionresult;
    }

    public void setCommonSchService(CommonSearchService commonSchService)
    {
        this.commonSchService = (CommonSearchService)ServiceLocator.findService("commonSchService");
    }

    protected void checkKeyValue(JsonObject jsono, String[] keyfield)
    {
        for (String f : keyfield)
        {
            Object o = jsono.get(f);
            if (o == null)
            {
                throw new CommonException(ReturnConstants.REQUIRED_PRARAM_NULL, f + " 不可为Null");
            }
            
            if (o.toString().equals(""))
                throw new CommonException(ReturnConstants.REQUIRED_PRARAM_NULL, f + " 不可为空");
        }
    }
    
    protected void checkRedList(String... keyword)
    {
        String[] fields = new String[1];
        fields[0] = "keyword";
        BaseParam param = new BaseParam();
        param.setTablename("V_U_REDLIST_ALL");
        param.addCondition(fields, Operator.In, keyword);
        param.addCondition("isdeleted", Operator.Equal, 0);
        
        int count = commonSchService.querylistCount(param);
        if(count > 0)
        {
            throw new CommonException(ReturnConstants.REQUIRED_PRARAM_ERROR, "查询的内容在红名单内");
        }
    }

    @JSON(serialize =  false)
    protected JSONObject getNetJSONObject() throws Exception
    {
        JSONObject jsonObject = JSONObject.fromObject(URLDecoder.decode(json, "utf-8"));
        return jsonObject;
    }
}
