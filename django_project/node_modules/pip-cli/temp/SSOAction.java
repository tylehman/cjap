package com.pip.action.account;

import java.lang.reflect.Type;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import com.pip.action.baseaction.BaseAction;
import net.sf.json.JSONObject;
import org.apache.struts2.ServletActionContext;

import com.google.gson.FixedMapTypeAdapter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.pip.accountcloud.api.AccountServer;
import com.pip.accountcloud.api.model.LoginType;
import com.pip.accountcloud.api.model.UserInfo;
import com.pip.annotation.ClassNeedLogin;
import com.pip.common.model.KeyValue;
import com.pip.common.model.Result;
import com.pip.common.model.enumfactory.LogTypeEnum;
import com.pip.common.model.log.AllLogDTO;
import com.pip.common.sys.SimpleLog;
import com.pip.common.util.IPConvert;
import com.pip.dao.common.AuditLogDao;
import com.pip.dao.sequence.LogSequenceTool;
import com.pip.service.common.AllLogService;
import com.pip.util.UserUtil;
import org.apache.struts2.json.annotations.JSON;

@ClassNeedLogin(need = false)
public class SSOAction extends BaseAction
{
    private AccountServer accountServer;

    private AllLogService logService;

    private String url;

    @JSON(serialize = false)
    public String getSiteInfo() throws Exception
    {
        Result result = accountServer.getSysConfig();
        if (result.isFailed())
        {
            throw new Exception(result.getDescript());
        }
        Map<String, Object> config = (Map<String, Object>) result.getResult();
        map.put("pipv1", config.get("FIRSTPHASE_INDEX_URL"));

        map.put("station", UserUtil.getStationId());

        HttpSession session = UserUtil.getServletSession();
        Object requestUrl = session.getAttribute("RequestUrl");
        map.put("RequestUrl", requestUrl == null ? false : requestUrl.toString());
        return actionresult;
    }

    public String asyncLogin() throws Exception
    {
        JSONObject jsonObject = getNetJSONObject();
        String idcard = jsonObject.optString("pipck", "");
        String userkey = UserUtil.getUserKey();

        Result<Boolean> isOnline = accountServer.QImOnline(userkey);
        if (isOnline.isFailed())
        {
            throw new Exception(isOnline.getDescript());
        }

        String userid = UserUtil.getUserId();
        boolean loginSuccess = false;
        boolean needLogin = !(!idcard.equals("") && idcard.equals(userid) && isOnline.getResult());
        if (needLogin)
        {
            Long timestamp = jsonObject.optLong("ltime", 0);
            String acls = jsonObject.optString("au", "");
            Date date = new Date(timestamp);
            List<KeyValue<String, Object>> roles = UserUtil.getRoles(acls);

            Result<List<Object>> loginResult = accountServer.Login1("author", idcard, date, "iPortalWeb", UserUtil.getServletRequest().getRemoteAddr(), LoginType.certificates, roles);
            if (loginResult.isFailed())
            {
                throw new Exception(loginResult.getDescript());
            }

            loginSuccess = true;
            List<Object> objects = loginResult.getResult();
            HttpSession session = UserUtil.getServletSession();
            session.setAttribute("userkey", objects.get(0));
            session.setAttribute("user", objects.get(1));
            session.setAttribute("canAccessTestPage", objects.get(3));
        }
        map.put("needLogin", needLogin);
        map.put("loginSuccess", loginSuccess);
        return actionresult;
    }
    
    public String hub() throws Exception
    {
        return "hub";
    }
    
    public String login() throws Exception
    {
        HttpSession session = UserUtil.getServletSession();
        String url = String.valueOf(session.getAttribute("RequestUrl"));
        session.removeAttribute("RequestUrl");
        
        Gson gson = new GsonBuilder().registerTypeAdapter(Map.class, new FixedMapTypeAdapter()).create();
        Type type = new TypeToken<Map<String, Object>>(){}.getType();
        Map<String, Object> map = gson.fromJson(json, type);
        
        String pipck = String.valueOf(map.get("pipck"));
        String ltime = String.valueOf(map.get("ltime"));
        String acls = String.valueOf(map.get("au"));
        
        if("".equals(pipck) || "".equals(ltime))
        {
            //一期未登录, 转到一期登录页
            return "pipv1_login";
        }
        else
        {
            String userkey = UserUtil.getUserKey();
            if(!"".equals(userkey))
            {
                //二期登出操作
                Result result = accountServer.Logout("author", "iPortalWeb", userkey);
                if("0".equals(result.getCode()))
                {
                    session.removeAttribute("userkey");
                    session.removeAttribute("user");
                    session.removeAttribute("canAccessTestPage");
                }
                else
                {
                    throw new Exception(result.getDescript());
                }
            }
            //执行二期登录操作
            Date lasttime = new Date(Long.valueOf(ltime));
            List<KeyValue<String, Object>> roles = UserUtil.getRoles(acls);
            Result result = accountServer.Login1("author", pipck, lasttime, "iPortalWeb", ServletActionContext.getRequest().getRemoteAddr(), LoginType.certificates, roles);

            //result = accountServer.SyncLogin("author", pipck, lasttime, "iPortalWeb", ServletActionContext.getRequest().getRemoteAddr(), LoginType.certificates);
            if("0".equals(result.getCode()))
            {
                @SuppressWarnings("unchecked")
                List<Object> objs = (List<Object>)result.getResult();
                session.setAttribute("userkey", objs.get(0));
                session.setAttribute("user", objs.get(1));
                session.setAttribute("canAccessTestPage", objs.get(3));

                try{
                    String remoteIP = ServletActionContext.getRequest().getRemoteAddr();
                    if("0:0:0:0:0:0:0:1".equals(remoteIP))
                    {
                        remoteIP = "127.0.0.1";
                    }
                    AllLogDTO log = new AllLogDTO();
                    UserInfo userInfo = (UserInfo)accountServer.MyUserInfo(objs.get(0).toString()).getResult();
                    log.setIp(IPConvert.ipStrToLong(remoteIP));
                    log.setLoginfo("登录到系统");
                    log.setPid(LogSequenceTool.getInstance().getSequenceNo());
                    log.setTime(new Date());
                    log.setUserid(userInfo.getId());
                    log.setUsername(userInfo.getName());
                    log.setLogtype(LogTypeEnum.LOG_TYPE_LOGIN);
                    logService.saveAllLog(log);
                    AuditLogDao.getInstance().addLoginLog();
                }
                catch (Exception err)
                {
                    SimpleLog.outException(err);
                }
                if(url != null && !"".equals(url) && !"null".equals(url))
                {
                    this.url = url.toString();
                    return "redirect";
                }
                else
                {
                    return "pipv1_index";
                }
            }
            else
            {
                throw new Exception(result.getDescript());
            }
        }
    }

    public void setAccountServer(AccountServer accountServer)
    {
        this.accountServer = accountServer;
    }

    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }

    public void setLogService(AllLogService logService) {
        this.logService = logService;
    }
}
