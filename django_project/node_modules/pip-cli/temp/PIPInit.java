package com.pip.servlet;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import com.pip.dao.common.StolenRobbedPhoneDAO;
import org.neo4j.graphdb.GraphDatabaseService;
import org.springframework.jdbc.core.JdbcTemplate;

import com.pip.action.efile.XMLUtil;
import com.pip.common.config.PipConfig;
import com.pip.common.dao.sqlengine.SQLEngine;
import com.pip.common.sys.SimpleLog;
import com.pip.common.util.FileUtil;
import com.pip.dao.common.RedListDAO;
import com.pip.graphDb.dao.DB;import com.pip.util.ServiceLocator;

/**
 * 
 * 初始化PIP前端
 * <li>包括配置文件，系统需要初始化的东西
 * 
 * @author  hh
 * @version  [版本号, Feb 21, 2014]
 */
public class PIPInit extends HttpServlet
{
    private static final long serialVersionUID = -3203463347210010596L;
    
    @Override
    public void init() throws ServletException
    {
        super.init();
        SimpleLog.outString("================================================");
        SimpleLog.outString("======== PIP Web 初始化 ...  ========");
       
        //设置spring
        ServiceLocator.setContext(this.getServletConfig());
        
        //检查磁盘目录
        checkDistDataDir();
        
        XMLUtil.instance();//初始化
        
        SQLEngine.instance();//SQL引擎初始化
        
        SimpleLog.outString("======== Simple Log init finished ... ========");
        SimpleLog.outString("======== Springframework and dubbo service is started ... ========");
    }
    
    /**
     * 检查站点依赖的数据目录
     * @throws IOException
     */
    private void checkDistDataDir()
    {
        String distRoot = PipConfig.getString("SITE_DIST_PATH");
        FileUtil.checkDirectory(distRoot);
        File descFile = new File(new File(distRoot).getAbsolutePath() + File.separator + "警告.txt");
        if (!descFile.exists())
        {
            try
            {
                descFile.createNewFile();
                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(descFile, false)));
                out.write("警告：该文件夹下除了temp文件夹以外不得人工删除。");
                out.flush();
                out.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }
    
    @Override
    public void destroy()
    {
        super.destroy();
    }
}
