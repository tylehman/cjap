package com.pip.{name}.action.account;

import com.pip.common.model.Mid;
import com.pip.common.model.Result;
import com.pip.common.util.MD5;
import com.pip.common.vali.IdcardValidator;
import com.pip.accountcloud.api.AccountServer;
import com.pip.accountcloud.api.model.LoginType;
import com.pip.accountcloud.api.model.UserInfo;
import com.pip.{name}.action.base.BaseAction;
import com.pip.{name}.annotation.ClassNeedLogin;
import com.pip.{name}.annotation.ActionNeedLogin;
import com.pip.{name}.util.JsonObject;
import com.pip.{name}.util.UserUtil;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.json.annotations.JSON;

import javax.servlet.http.HttpSession;
import java.util.List;

@ClassNeedLogin(need = false)
public class AccountAction extends BaseAction
{

    private AccountServer accountServer;

    public String toLogin() throws Exception
    {
        JsonObject jsonObject = new JsonObject(json);
        String checkcode = jsonObject.optString("checkcode", "");
        String username = jsonObject.optString("username", "");
        String password = jsonObject.optString("password", "");

        HttpSession session = UserUtil.getServletSession();
        if (!checkcode.toLowerCase().equals(session.getAttribute("checkcode")))
        {
            throw new Exception("验证码错误.");
        }

        Result<List<Object>> result = accountServer.Login("author", username, MD5.getMD5(password), "iPortalWeb", ServletActionContext.getRequest().getRemoteAddr(), LoginType.certificates);
        if (result.isFailed())
        {
            throw new Exception(result.getDescript());
        }

        List<Object> objects = result.getResult();
        session.setAttribute("userkey", objects.get(0));
        session.setAttribute("user", objects.get(1));
        session.setAttribute("canAccessTestPage", objects.get(3));
        session.removeAttribute("checkcode");

        String url = "index.action";
        Object requestUrl = session.getAttribute("RequestUrl");
        if (requestUrl != null && !"".equals(requestUrl))
        {
            url = session.getAttribute("RequestUrl").toString();
            session.removeAttribute("RequestUrl");
        }
        map.put("url", url);
        return actionresult;
    }

    public String toRegister() throws Exception
    {
        JsonObject jsonObject = new JsonObject(json);
        String idcard = jsonObject.optString("idcard", "");
        IdcardValidator vali = new IdcardValidator();
        if (!vali.isValidate18Idcard2(idcard))
        {
            throw new Exception("身份证审核不通过.");
        }

        UserInfo user = new UserInfo();
        user.setId(new Mid(UserUtil.getStationId(), idcard));
        user.setName(jsonObject.optString("name", ""));
        user.setPhone(jsonObject.optString("phone", ""));
        user.setPoliceCode(jsonObject.optString("policecode", ""));
        user.setUnitCode(jsonObject.optString("unitcode", ""));
        Result result = accountServer.Register("author", "iPortalWeb", user, MD5.getMD5(jsonObject.optString("password", "")), ServletActionContext.getRequest().getRemoteAddr());
        if (result.isFailed())
        {
            throw new Exception(result.getDescript());
        }
        // 注册成功. 当前帐号处于待审核状态, 无法进行登陆操作.
        return actionresult;
    }

    @ActionNeedLogin(need = true)
    public String logout() throws Exception
    {
        HttpSession session = UserUtil.getServletSession();
        Object userkey = session.getAttribute("userkey");
        if (userkey != null)
        {
            Result result = accountServer.Logout("author", "iPortalWeb", userkey.toString());
            if (result.isFailed())
            {
                throw new Exception(result.getDescript());
            }
            session.removeAttribute("userkey");
            session.removeAttribute("user");
            session.removeAttribute("canAccessTestPage");
        }
        map.put("url", UserUtil.getServletRequest().getAttribute("pipv1") + "/Logout.aspx");
        return actionresult;
    }

    @ActionNeedLogin(need = true)
    public String Logout() throws Exception
    {
        actionresult = "pipv1_logout";
        HttpSession session = UserUtil.getServletSession();
        Object userkey = session.getAttribute("userkey");
        if (userkey != null)
        {
            Result result = accountServer.Logout("author", "iPortalWeb", userkey.toString());
            if (result.isFailed())
            {
                throw new Exception(result.getDescript());
            }
            session.removeAttribute("userkey");
            session.removeAttribute("user");
            session.removeAttribute("canAccessTestPage");
        }
        return actionresult;
    }

    @JSON(serialize =  false)
    @ActionNeedLogin(need = true)
    public String getUserInfo() throws Exception
    {
        map.put("user", UserUtil.getUserInfo());
        return actionresult;
    }

    public void setAccountServer(AccountServer accountServer)
    {
        this.accountServer = accountServer;
    }

}