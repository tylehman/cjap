'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _helpers = require('../utils/helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global FileAPI */
require('fileapi');

var AddImage = function (_React$Component) {
    _inherits(AddImage, _React$Component);

    function AddImage(props) {
        _classCallCheck(this, AddImage);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AddImage).call(this, props));

        _this.handleChange = _this.handleChange.bind(_this);
        return _this;
    }

    _createClass(AddImage, [{
        key: 'handleChange',
        value: function handleChange(evt) {
            console.log(evt);
            var files = FileAPI.getFiles(evt);
            var onlyImagesFilter = function onlyImagesFilter(file) {
                return (/^image/.test(file.type)
                );
            };
            var onUploadComplete = this.props.onUploadComplete;
            var onFileUploadComplete = this.props.onFileUploadComplete;
            var onUploadStart = this.props.onUploadStart;
            var onProgress = this.props.onProgress;
            var onFileProgress = this.props.onFileProgress;
            var uploadUrl = this.props.uploadUrl;

            FileAPI.filterFiles(files, onlyImagesFilter, function (files) {
                if (files.length) {
                    FileAPI.upload({
                        url: uploadUrl,
                        files: { files: files },
                        headers: {
                            'X-CSRFToken': _helpers2.default.getCookie('csrftoken')
                        },
                        filecomplete: function filecomplete(err, xhr, file, options) {
                            if (onFileUploadComplete) {
                                var data = JSON.parse(xhr.responseText);
                                uploadUrl = data.upload_url;
                                onFileUploadComplete(err, xhr, file, options);
                            }
                        },
                        prepare: function prepare(file, options) {
                            options.url = uploadUrl;
                        },
                        complete: function complete(err, xhr) {
                            if (onUploadComplete) {
                                onUploadComplete(err, xhr, files);
                            }
                        },
                        progress: function progress(evt, file, xhr, options) {
                            if (onProgress) {
                                onProgress(evt, file, xhr, options);
                            }
                        },
                        upload: function upload(xhr, options) {
                            if (onUploadStart) {
                                onUploadStart(xhr, options);
                            }
                        },
                        fileprogress: function fileprogress(evt, file, xhr, options) {
                            if (onFileProgress) {
                                onFileProgress(evt, file, xhr, options);
                            }
                        }
                    });
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'span',
                { className: 'btn-add-image' },
                'Browse ',
                _react2.default.createElement('input', { type: 'file', name: 'files', multiple: true, onChange: this.handleChange })
            );
        }
    }]);

    return AddImage;
}(_react2.default.Component);

AddImage.propTypes = {
    onUploadComplete: _react2.default.PropTypes.func,
    onFileUploadComplete: _react2.default.PropTypes.func,
    onUploadStart: _react2.default.PropTypes.func,
    onProgress: _react2.default.PropTypes.func,
    onFileProgress: _react2.default.PropTypes.func,
    uploadUrl: _react2.default.PropTypes.string.isRequired,
    imageSetId: _react2.default.PropTypes.number
};

module.exports = AddImage;