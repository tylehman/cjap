'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PreviewImage = require('./PreviewImage');

var _PreviewImage2 = _interopRequireDefault(_PreviewImage);

var _AddImage = require('./AddImage');

var _AddImage2 = _interopRequireDefault(_AddImage);

var _ImageList = require('./ImageList');

var _ImageList2 = _interopRequireDefault(_ImageList);

var _ProgressBar = require('./ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _helpers = require('../utils/helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImagePanel = function (_React$Component) {
    _inherits(ImagePanel, _React$Component);

    function ImagePanel(props) {
        _classCallCheck(this, ImagePanel);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ImagePanel).call(this, props));

        _this.render = _this.render.bind(_this);
        _this.componentDidMount = _this.componentDidMount.bind(_this);
        _this.refreshWithResponse = _this.refreshWithResponse.bind(_this);
        _this.postAndRefresh = _this.postAndRefresh.bind(_this);
        _this.deleteImage = _this.deleteImage.bind(_this);
        _this.markPrimary = _this.markPrimary.bind(_this);
        _this.handleOnUploadComplete = _this.handleOnUploadComplete.bind(_this);
        _this.handleOnFileUploadComplete = _this.handleOnFileUploadComplete.bind(_this);
        _this.handleOnFileProgress = _this.handleOnFileProgress.bind(_this);
        _this.handleOnSelectImage = _this.handleOnSelectImage.bind(_this);
        _this.handleOnUploadStart = _this.handleOnUploadStart.bind(_this);
        _this.state = {
            selectedImage: {},
            images: [],
            percentageComplete: 0,
            totalToUpload: 0,
            totalUploaded: 0,
            imageSetId: _this.props.initialImageSetId,
            uploadUrl: _this.props.initialUploadUrl
        };
        return _this;
    }

    _createClass(ImagePanel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            console.log('mount', this.props);
            if (this.props.imagesUrl) {
                _helpers2.default.getImages(this.props.imagesUrl).then(this.refreshWithResponse);
            }
        }
    }, {
        key: 'refreshWithResponse',
        value: function refreshWithResponse(dataObj) {
            var selectedImage = dataObj.data.primaryImage;
            if (!selectedImage.hasOwnProperty('medium_thumbnail') && dataObj.data.images.length > 0) {
                selectedImage = dataObj.data.images[0];
            }
            this.setState({
                selectedImage: selectedImage,
                images: dataObj.data.images,
                imageSetId: dataObj.data.pk,
                uploadUrl: dataObj.data.upload_url
            });
        }
    }, {
        key: 'postAndRefresh',
        value: function postAndRefresh(url) {
            _helpers2.default.postUrl(url).then(this.refreshWithResponse);
        }
    }, {
        key: 'deleteImage',
        value: function deleteImage(image) {
            this.postAndRefresh(image.delete_url);
            return false;
        }
    }, {
        key: 'markPrimary',
        value: function markPrimary(image) {
            this.postAndRefresh(image.make_primary_url);
            return false;
        }
    }, {
        key: 'handleOnUploadComplete',
        value: function handleOnUploadComplete() {
            this.setState({
                totalToUpload: 0,
                totalUploaded: 0,
                percentageComplete: 0
            });
        }
    }, {
        key: 'handleOnFileUploadComplete',
        value: function handleOnFileUploadComplete(err, xhr, file) {
            var totalUploaded = this.state.totalUploaded + file.size;
            var responseData = JSON.parse(xhr.responseText);
            this.setState({
                totalUploaded: totalUploaded,
                percentageComplete: Math.round(totalUploaded / this.state.totalToUpload * 100)
            });
            this.refreshWithResponse({
                data: responseData
            });
        }
    }, {
        key: 'handleOnFileProgress',
        value: function handleOnFileProgress(evt) {
            this.setState({
                percentageComplete: Math.round((this.state.totalUploaded + evt.loaded) / this.state.totalToUpload * 100)
            });
        }
    }, {
        key: 'handleOnSelectImage',
        value: function handleOnSelectImage(image) {
            this.setState({
                selectedImage: image
            });
        }
    }, {
        key: 'handleOnUploadStart',
        value: function handleOnUploadStart(xhr, options) {
            var totalToUpload = 0;
            options.files.files.forEach(function (file) {
                totalToUpload += file.size;
            });
            this.setState({
                totalToUpload: totalToUpload
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var progressBar = null;
            var imageSet = null;
            if (this.state.percentageComplete > 0) {
                progressBar = _react2.default.createElement(_ProgressBar2.default, { percentageComplete: this.state.percentageComplete });
            }
            if (this.state.imageSetId) {
                imageSet = _react2.default.createElement('input', { type: 'hidden', name: 'imageset', value: this.state.imageSetId });
            }
            return _react2.default.createElement(
                'div',
                { className: 'media-panel' },
                _react2.default.createElement(
                    'div',
                    { className: 'panel-body' },
                    progressBar,
                    _react2.default.createElement(
                        'div',
                        { className: 'row' },
                        _react2.default.createElement(_PreviewImage2.default, { image: this.state.selectedImage,
                            deleteImage: this.deleteImage,
                            markPrimaryImage: this.markPrimary }),
                        _react2.default.createElement(_ImageList2.default, { images: this.state.images,
                            onSelectImage: this.handleOnSelectImage })
                    )
                ),
                imageSet,
                _react2.default.createElement(
                    'div',
                    { className: 'panel-footer' },
                    _react2.default.createElement(_AddImage2.default, { uploadUrl: this.state.uploadUrl,
                        onUploadComplete: this.handleOnUploadComplete,
                        onFileUploadComplete: this.handleOnFileUploadComplete,
                        onFileProgress: this.handleOnFileProgress,
                        onUploadStart: this.handleOnUploadStart })
                )
            );
        }
    }]);

    return ImagePanel;
}(_react2.default.Component);

ImagePanel.propTypes = {
    initialImageSetId: _react2.default.PropTypes.number,
    imagesUrl: _react2.default.PropTypes.string,
    initialUploadUrl: _react2.default.PropTypes.string.isRequired
};

module.exports = ImagePanel;